// This file is @generated by prost-build.
/// backend
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BackendPutData {
    #[prost(string, tag = "1")]
    pub host: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub fs_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub obj_key: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub cost_time: i32,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BackendGetData {
    #[prost(string, tag = "1")]
    pub host: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub fs_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub obj_key: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub cost_time: i32,
}
/// meta
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateIno {
    #[prost(string, tag = "1")]
    pub host: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub fs_id: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub parent_ino: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub name: ::prost::alloc::string::String,
    #[prost(int32, tag = "6")]
    pub cost_time: i32,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateSegs {
    #[prost(string, tag = "1")]
    pub host: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub fs_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub ino: ::prost::alloc::string::String,
    #[prost(int32, tag = "5")]
    pub cost_time: i32,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteFile {
    #[prost(string, tag = "1")]
    pub host: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub fs_id: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub ino: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub name: ::prost::alloc::string::String,
    #[prost(int32, tag = "6")]
    pub cost_time: i32,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MessageType {
    BackendPutDataMsg = 0,
    BackendGetDataMsg = 1,
    CreateInoMsg = 2,
    UpdateSegsMsg = 3,
    DeleteFileMsg = 4,
}
impl MessageType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            MessageType::BackendPutDataMsg => "BackendPutDataMsg",
            MessageType::BackendGetDataMsg => "BackendGetDataMsg",
            MessageType::CreateInoMsg => "CreateInoMsg",
            MessageType::UpdateSegsMsg => "UpdateSegsMsg",
            MessageType::DeleteFileMsg => "DeleteFileMsg",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BackendPutDataMsg" => Some(Self::BackendPutDataMsg),
            "BackendGetDataMsg" => Some(Self::BackendGetDataMsg),
            "CreateInoMsg" => Some(Self::CreateInoMsg),
            "UpdateSegsMsg" => Some(Self::UpdateSegsMsg),
            "DeleteFileMsg" => Some(Self::DeleteFileMsg),
            _ => None,
        }
    }
}
